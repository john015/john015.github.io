{"data":{"markdownRemark":{"html":"<p>어제(2019-02-06) react 16.8이 release되면서 드디어 Hooks가 stable release되었습니다.</p>\n<p><b>Hooks는 state와 lifecycle과 같은 기존 클래스 컴포넌트에서만 사용 할 수 있었던 React의 기능들을 함수형 컴포넌트에서도 사용할 수 있게 해주는 새로운 기능입니다</b></p>\n<p>Hooks를 사용하기 위해선 react 16.8버전 이상이여야 합니다</p>\n<h2 id=\"167alpha-버전과의-차이점\"><a href=\"#167alpha-%EB%B2%84%EC%A0%84%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16.7alpha 버전과의 차이점</h2>\n<p>먼저 이미 alpha버전을 통해 react hooks에 대해 알고 계신분들을 위해 기존에 alpha release된 react hooks와 이번에 stable release 된 react-hooks의 차이점은</p>\n<ul>\n<li><code class=\"language-text\">useMutationEffect</code> Hooks 삭제</li>\n<li><code class=\"language-text\">useImperativeMethods</code> Hooks <code class=\"language-text\">useImperativeHandle</code>으로 이름 변경</li>\n<li>useState와 useReducer Hooks의 state를 동일한 값으로 변경 했을시 리렌더링 안됨.</li>\n<li>useEffect / useMemo / useCallback hooks에 전달 된 첫 번째 인자 비교 불가</li>\n<li>etc..</li>\n</ul>\n<p>이 있습니다 더 자세히 알고 싶으시면 <a href=\"https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#hooks-changelog-since-alpha-versions\">링크</a> 를 참고해 주세요</p>\n<h2 id=\"react-hooks-사용-규칙\"><a href=\"#react-hooks-%EC%82%AC%EC%9A%A9-%EA%B7%9C%EC%B9%99\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hooks 사용 규칙</h2>\n<p>Hooks를 사용할려면 몇가지의 규칙을 준수 해야합니다</p>\n<h3 id=\"1-hooks를-함수형-컴포넌트의-top-level에서만-호출-해야-합니다\"><a href=\"#1-hooks%EB%A5%BC-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-top-level%EC%97%90%EC%84%9C%EB%A7%8C-%ED%98%B8%EC%B6%9C-%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Hooks를 함수형 컴포넌트의 Top-level에서만 호출 해야 합니다.</h3>\n<p>반복문, 조건문, 중첩된 함수에서 호출하면 안되고 오직 최상위 함수에서만 호출 해야 합니다.</p>\n<p>말보단 코드가 더 이해하기 쉬우니 코드로 설명 드리면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ① OK</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ② X</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count2<span class=\"token punctuation\">,</span> setCount2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ③ X</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">''</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count3<span class=\"token punctuation\">,</span> setCount3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ④ X</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFnc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count4<span class=\"token punctuation\">,</span> setCount4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>useState Hook 은 함수형 컴포넌트에서 클래스 컴포넌트처럼 state를 사용 할 수 있게 해줍니다.</p>\n<p>①의 경우 함수형 컴포넌트의 최상위에서 hooks를 호출 하였기 때문에 문제가 없고 ②, ③, ④의 경우 각각 반복문, 조건문, 중첩된 함수에서 호출했기 때문에 호출하면 안됩니다</p>\n<h3 id=\"2-함수형-컴포넌트-에서만-hooks를-호출해야-합니다\"><a href=\"#2-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%97%90%EC%84%9C%EB%A7%8C-hooks%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수형 컴포넌트 에서만 Hooks를 호출해야 합니다</h3>\n<p>일반 JavaScript 함수에서는 Hooks를 호출 해서는 안됩니다.\n하지만 custom Hooks에서는 호출 할 수 있습니다 이것에 대해서는 아래에서 알아 보겠습니다.</p>\n<blockquote>\n<p>만일 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">ESLint</a>나 <a href=\"https://www.npmjs.com/package/tslint-react-hooks\">TSLint</a>를 쓰시면 위 규칙을 지키지 않을때 에러를 표시해주는 플러그인도 있습니다.</p>\n</blockquote>\n<h2 id=\"usestate-hook\"><a href=\"#usestate-hook\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState Hook</h2>\n<p>useState은 함수형 컴포넌트에서 클래스 컴포넌트처럼 state를 사용 할 수 있게 해줍니다.\nuseState를 활용해서 counter를 구현해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>increase count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<p>useState 함수는 파라미터로 state의 기본값을 받고 숫자, 문자, 객체, 배열, 함수등 다양하게 입력 할 수 있습니다 useState를 호출하면 배열을 반환 하는데 배열의 첫번째 원소는 현재 state 값이고 두번째 원소는 setState 함수로 클래스 컴포넌트의 setState처럼 현재 상태를 업데이트하는 데 사용됩니다 사용법은 동일하며 호출시 클래스 컴포넌트와 동일하게 리렌더링 됩니다</p>\n<p>useState의 파라미터로 함수를 입력 할 수 있는데 이 함수는 후속 렌더링에서는 무시되고 초기 렌더링 에서만 호출 되며 return값이 기본값이 됩니다 state의 기본값을 정의 할때 값 비싼 연산을 한다면 파라미터로 함수를 입력 하여 성능 최적화를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> initialState <span class=\"token comment\">// 기본값</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>주의점 으로는 클래스 컴포넌트의 setState method와 달리 useState의 setState는 새로운 state를 자동으로 병합하지 않습니다 redux의 state처럼 immutable.js나 immer.js를 사용하거나 Object.assign 또는 전개 연산자를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>profile<span class=\"token punctuation\">,</span> setProfile<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>profile2<span class=\"token punctuation\">,</span> setProfile2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span> <span class=\"token comment\">//  { name: 'kim', gender: 'male' }이 되지 않고 {name: 'kim'} 이 됨</span>\n  <span class=\"token function\">setProfile2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>profile2<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 정상적으로 { name: 'lee', gender: 'male' } 이 됨</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 state를 동일한 값으로 변경 했을시 리렌더링을 하지 않습니다.</p>\n<h2 id=\"useeffect\"><a href=\"#useeffect\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect</h2>\n<p>useEffect는 컴포넌트가 마운트 되거나 리렌더링이 마치고 나서 실행됩니다. componentDidMount 와 componentDidUpdate 와 비슷하다고 생각하시면 됩니다.</p>","timeToRead":4,"excerpt":"어제(2019-02-06) react 16.8이 release되면서 드디어 Hooks가 stable release되었습니다. Hooks는 state와 lifecycle과 같은 기존 클래스 컴포넌트에서만 사용 할 수 있었던 React…","frontmatter":{"title":"Introducing react Hooks","cover":"Introducing-react-hooks/cover.png","date":"2019-02-07","category":"tech","tags":["react","hooks","react 16.8"]},"fields":{"slug":"/introducing-react-hooks","date":"2019-02-06T15:00:00.000Z"}}},"pageContext":{"slug":"/introducing-react-hooks"}}