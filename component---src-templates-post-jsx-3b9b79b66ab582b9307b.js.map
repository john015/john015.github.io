{"version":3,"sources":["webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/SEO/index.jsx"],"names":["Disqus","props","_this","_Component","call","this","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","render","_this$props","postNode","expanded","config","disqusShortname","post","frontmatter","disqusConfig","url","urljoin","siteUrl","pathPrefix","fields","slug","identifier","title","react_default","a","createElement","Card_default","className","CardTitle_default","avatar","Avatars_default","icon","FontIcons_default","expander","CardText_default","expandable","lib","shortname","Snackbars_default","onDismiss","Component","PostInfo","iconClassName","moment","date","format","dateFormat","SocialLinks","postPath","mobile","iconSize","TwitterShareButton","TwitterIcon","round","size","GooglePlusShareButton","GooglePlusIcon","FacebookShareButton","quote","excerpt","FacebookIcon","PostTemplate","_React$Component","handleResize","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","pageContext","data","location","postOverlapClass","markdownRemark","id","category_id","postDefaultCategoryID","coverHeight","layout","Helmet_default","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","components_PostInfo","dangerouslySetInnerHTML","__html","html","PostTags","tags","components_SocialLinks","components_Disqus","React","pageQuery","description","image","postURL","postMeta","cover","siteTitle","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","split","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-post-jsx-3b9b79b66ab582b9307b.js","sourcesContent":["import React, { Component } from 'react'\n// import ReactDisqusComments from 'react-disqus-comments'\nimport urljoin from 'url-join'\nimport Card from 'react-md/lib/Cards/Card'\nimport CardTitle from 'react-md/lib/Cards/CardTitle'\nimport CardText from 'react-md/lib/Cards/CardText'\nimport Avatar from 'react-md/lib/Avatars'\nimport FontIcon from 'react-md/lib/FontIcons'\nimport Snackbar from 'react-md/lib/Snackbars'\nimport { DiscussionEmbed } from 'disqus-react'\nimport config from '../../../data/SiteConfig'\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      toasts: []\n    }\n    this.notifyAboutComment = this.notifyAboutComment.bind(this)\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this)\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts\n    this.setState({ toasts })\n  }\n\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice()\n    toasts.push({ text: '댓글이 등록되었습니다' })\n    this.setState({ toasts })\n  }\n\n  render() {\n    const { postNode, expanded } = this.props\n    if (!config.disqusShortname) {\n      return null\n    }\n    const post = postNode.frontmatter\n    const url = urljoin(config.siteUrl, config.pathPrefix, postNode.fields.slug)\n    const disqusConfig = {\n      url,\n      identifier: post.title,\n      title: post.title\n    }\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <DiscussionEmbed\n            shortname={config.disqusShortname}\n            config={disqusConfig}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    )\n  }\n}\n\nexport default Disqus\n","import React, { Component } from 'react'\nimport FontIcon from 'react-md/lib/FontIcons'\nimport moment from 'moment'\nimport config from '../../../data/SiteConfig'\nimport './PostInfo.scss'\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props\n    return (\n      <div className=\"post-info\">\n        <div className=\"date\">\n          <FontIcon iconClassName=\"fa fa-calendar\" />\n          {moment(postNode.fields.date).format(config.dateFormat)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PostInfo\n","import React, { Component } from 'react'\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  TwitterShareButton,\n  FacebookIcon,\n  TwitterIcon,\n  GooglePlusIcon\n} from 'react-share'\nimport urljoin from 'url-join'\nimport config from '../../../data/SiteConfig'\nimport './SocialLinks.scss'\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props\n    const post = postNode.frontmatter\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath)\n    const iconSize = mobile ? 36 : 48\n\n    return (\n      <div className=\"social-links\">\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n        </FacebookShareButton>\n      </div>\n    )\n  }\n}\n\nexport default SocialLinks\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Card from 'react-md/lib/Cards'\nimport CardText from 'react-md/lib/Cards/CardText'\nimport Layout from '../layout'\nimport Disqus from '../components/Disqus'\nimport PostTags from '../components/PostTags'\nimport PostCover from '../components/PostCover'\nimport PostInfo from '../components/PostInfo'\nimport SocialLinks from '../components/SocialLinks'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\nimport './b16-tomorrow-dark.css'\nimport './post.scss'\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mobile: true\n    }\n    this.handleResize = this.handleResize.bind(this)\n  }\n\n  componentDidMount() {\n    this.handleResize()\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false })\n    } else {\n      this.setState({ mobile: true })\n    }\n  }\n\n  render() {\n    const { pageContext, data, location } = this.props\n    const { mobile } = this.state\n    const { slug } = pageContext\n    const expanded = !mobile\n    const postOverlapClass = mobile ? 'post-overlap-mobile' : 'post-overlap'\n    const postNode = data.markdownRemark\n    const post = postNode.frontmatter\n    if (!post.id) {\n      post.id = slug\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID\n    }\n\n    const coverHeight = mobile ? 180 : 350\n    return (\n      <Layout location={location}>\n        <div className=\"post-page md-grid md-grid--no-spacing\">\n          <Helmet>\n            <title>{post.title}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <PostCover\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName=\"md-grid md-cell--9 post-cover\"\n          />\n          <div\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\n          >\n            <Card className=\"md-grid md-cell md-cell--12 post detail-post-wrap\">\n              <CardText className=\"post-body\">\n                <h1 className=\"post-header\">{post.title}</h1>\n                <PostInfo postNode={postNode} />\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </CardText>\n              <div className=\"post-meta\">\n                <PostTags tags={post.tags} />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={mobile}\n                />\n              </div>\n            </Card>\n            <Disqus postNode={postNode} expanded={expanded} />\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../../data/SiteConfig'\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image\n    let postURL\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      ;({ title } = postMeta)\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt\n      image = postMeta.cover\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : ''\n      }\n    ]\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image\n          },\n          description\n        }\n      ])\n    }\n    image = `https://john015.github.io/assets/${\n      image.split('https://john015.github.io/')[1]\n    }`\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : ''}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : ''}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n\nexport default SEO\n"],"sourceRoot":""}